/*<TOAD_FILE_CHUNK>*/
CREATE OR REPLACE PACKAGE pkg_note_tags
IS

  TYPE tag_stat
  IS RECORD
    ( tag note_tags.tag%TYPE
    , count INTEGER );

  TYPE tag_stats
  IS TABLE OF tag_stat
  INDEX BY BINARY_INTEGER;

  CURSOR cur_tag_stats
    ( the_notebook_id IN notebooks.id%TYPE )
  RETURN tag_stat;

  FUNCTION f_get_tags
    ( the_note_id IN notes.id%TYPE )
  RETURN pkg_array_utils.vc_arr;

  FUNCTION f_get_tag_stats
    ( the_notebook_id IN notebooks.id%TYPE )
  RETURN tag_stats;

  PROCEDURE p_save
    ( the_note_tag_rec IN OUT note_tags%ROWTYPE );
    
  PROCEDURE p_save_note_tags
    ( the_note_id IN notes.id%TYPE
    , the_tags IN pkg_array_utils.vc_arr );
    
END;

/
/*<TOAD_FILE_CHUNK>*/

CREATE OR REPLACE PACKAGE BODY pkg_note_tags
IS

  CURSOR cur_tag_stats
    ( the_notebook_id IN notebooks.id%TYPE )
  RETURN tag_stat
  IS
    SELECT *
    FROM (
        SELECT tag, COUNT( * ) cnt
        FROM note_tags nt
        JOIN notes n
        ON nt.note_id = n.id
        JOIN notebooks nb
        ON n.notebook_id = nb.id
        WHERE nb.id = the_notebook_id
        GROUP BY tag
         )
    ORDER BY cnt DESC, tag; 

  FUNCTION f_get_tags
    ( the_note_id IN notes.id%TYPE )
  RETURN pkg_array_utils.vc_arr
  IS
    return_arr pkg_array_utils.vc_arr;
  BEGIN

    SELECT tag
    BULK COLLECT INTO return_arr
    FROM note_tags
    WHERE note_id = the_note_id;
    
    RETURN return_arr;                              
  
  END;

  FUNCTION f_get_tag_stats
    ( the_notebook_id IN notebooks.id%TYPE )
  RETURN tag_stats
  IS
    return_stats tag_stats;
  BEGIN
  
    OPEN cur_tag_stats( the_notebook_id );
    FETCH cur_tag_stats 
    BULK COLLECT INTO return_stats;
    CLOSE cur_tag_stats;
    
    RETURN return_stats;    
  
  END;

  PROCEDURE p_save
    ( the_note_tag_rec IN OUT note_tags%ROWTYPE )
  IS
  BEGIN
  
    IF the_note_tag_rec.id IS NULL THEN
    
      SELECT note_tags_seq.NEXTVAL 
      INTO the_note_tag_rec.id
      FROM DUAL;
      
      INSERT INTO note_tags
        ( id
        , note_id
        , tag )
      VALUES
        ( the_note_tag_rec.id
        , the_note_tag_rec.note_id
        , the_note_tag_rec.tag );      
    
    ELSE

      UPDATE note_tags
      SET note_id = the_note_tag_rec.note_id
        , tag = the_note_tag_rec.tag
      WHERE id = the_note_tag_rec.id;    
    
    END IF;
  
  END;
  
  PROCEDURE p_save_note_tags
    ( the_note_id IN notes.id%TYPE
    , the_tags IN pkg_array_utils.vc_arr )
  IS
  BEGIN
  
    DELETE FROM note_tags WHERE note_id = the_note_id;
    
    IF the_tags.COUNT > 0 THEN
      FOR i IN the_tags.FIRST..the_tags.LAST LOOP
        DECLARE
          the_tag_rec note_tags%ROWTYPE;        
        BEGIN
          the_tag_rec.note_id := the_note_id;
          the_tag_rec.tag := the_tags( i );
          p_save( the_note_tag_rec => the_tag_rec );        
        END;
      END LOOP;
    END IF;     
  
  
  END;  

END;

/
