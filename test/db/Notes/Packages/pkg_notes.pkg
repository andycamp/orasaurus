/*<TOAD_FILE_CHUNK>*/
CREATE OR REPLACE PACKAGE pkg_notes
IS

  logger t_logger := t_logger( 'DEBUG' );

  TYPE note_rec
  IS RECORD
    ( notebook notebooks%ROWTYPE
    , note notes%ROWTYPE
    , tags pkg_array_utils.vc_arr
    , comments pkg_note_comments.note_comments_tab );

  TYPE notes_tab
  IS TABLE OF note_rec
  INDEX BY BINARY_INTEGER;        

  TYPE simple_notes_tab
  IS TABLE OF notes%ROWTYPE
  INDEX BY BINARY_INTEGER;

  CURSOR cur_notes
    ( the_notebook_id notes.notebook_id%TYPE )
  RETURN notes%ROWTYPE;

  CURSOR cur_notes_for_tags
    ( the_notebook_id IN notebooks.id%TYPE
    , the_tags vc_arr )
  RETURN notes%ROWTYPE;

  CURSOR cur_days_notes
    ( the_notebook_id IN notebooks.id%TYPE
    , the_date IN DATE )
  RETURN notes%ROWTYPE;

  CURSOR cur_find
    ( the_notebook_id IN notebooks.id%TYPE
    , the_search_text IN VARCHAR2 )
  RETURN notes%ROWTYPE;
  
  FUNCTION f_get_note
    ( the_id IN notes.id%TYPE )
  RETURN notes%ROWTYPE;

  FUNCTION f_get_note_rec
    ( the_id IN notes.id%TYPE )
  RETURN note_rec;

  FUNCTION f_get_notes_for_tags
    ( the_notebook_id IN notebooks.id%TYPE
    , the_tags IN vc_arr )
  RETURN notes_tab;  
  
  FUNCTION f_get_notes
    ( the_notebook_id notes.notebook_id%TYPE
    , the_start_index INTEGER DEFAULT 1
    , the_end_index INTEGER DEFAULT 25 )
  RETURN notes_tab;  

  FUNCTION f_get_days_notes
    ( the_notebook_id IN notebooks.id%TYPE
    , the_date IN DATE )
  RETURN notes_tab;

  FUNCTION find
    ( the_notebook_id IN notebooks.id%TYPE
    , the_search_text IN VARCHAR2 )
  RETURN notes_tab;

  PROCEDURE p_save
    ( the_note IN OUT notes%ROWTYPE );

  PROCEDURE p_save
    ( the_note_rec IN OUT note_rec );
    
  PROCEDURE p_validate
    ( the_note IN notes%ROWTYPE
    , the_messages OUT pkg_array_utils.vc_arr );  
    
  PROCEDURE p_compose_note
    ( notebook_id IN VARCHAR2
    , note_title IN VARCHAR2
    , note_note IN VARCHAR2
    , note_tags IN VARCHAR2 DEFAULT NULL
    , note_comments IN pkg_note_comments.note_comments_tab DEFAULT pkg_note_comments.empty_tab    
    , the_note OUT note_rec
    , messages OUT pkg_array_utils.vc_arr );

  PROCEDURE p_destroy
    ( the_id IN notes.id%TYPE );          

END;

/
/*<TOAD_FILE_CHUNK>*/

CREATE OR REPLACE PACKAGE BODY pkg_notes
IS

  CURSOR cur_notes
    ( the_notebook_id notes.notebook_id%TYPE )
  RETURN notes%ROWTYPE
  IS
    SELECT *
    FROM notes
    WHERE notebook_id = the_notebook_id 
    ORDER BY updated_at DESC;

  CURSOR cur_notes_for_tags
    ( the_notebook_id IN notebooks.id%TYPE
    , the_tags vc_arr )
  RETURN notes%ROWTYPE
  IS 
    SELECT DISTINCT n.*
    FROM notes n
    JOIN note_tags nt
    ON n.id = nt.note_id
    WHERE n.notebook_id = the_notebook_id    
    AND nt.tag IN ( SELECT * FROM TABLE( the_tags ) )
    ORDER BY n.updated_at DESC;  

  CURSOR cur_days_notes
    ( the_notebook_id IN notebooks.id%TYPE
    , the_date IN DATE )
  RETURN notes%ROWTYPE
  IS
    SELECT DISTINCT n.*
    FROM notes n
    LEFT OUTER JOIN note_comments c
    ON n.id = c.note_id
    WHERE notebook_id = the_notebook_id 
    AND ( ( TRUNC( n.created_at ) = TRUNC( the_date )
          OR TRUNC( n.updated_at ) = TRUNC( the_date ) )
      OR ( TRUNC( c.created_at ) = TRUNC( the_date )
          OR TRUNC( c.updated_at ) = TRUNC( the_date ) ) )
    ORDER BY n.updated_at DESC;

  CURSOR cur_find
    ( the_notebook_id IN notebooks.id%TYPE
    , the_search_text IN VARCHAR2 )
  RETURN notes%ROWTYPE
  IS
    SELECT DISTINCT n.*
    FROM notes n
    LEFT OUTER JOIN note_comments c
    ON n.id = c.note_id
    LEFT OUTER JOIN note_tags t
    ON n.id = t.note_id
    WHERE n.notebook_id = the_notebook_id
    AND ( LOWER( n.title ) LIKE '%'||LOWER( the_search_text )||'%'
      OR LOWER( n.note ) LIKE '%'||LOWER( the_search_text )||'%'
      OR LOWER( c.text ) LIKE '%'||LOWER( the_search_text )||'%'
      OR LOWER( t.tag ) LIKE '%'||LOWER( the_search_text )||'%' )
    ORDER BY n.updated_at;

  FUNCTION f_get_note
    ( the_id IN notes.id%TYPE )
  RETURN notes%ROWTYPE
  IS
    return_rec notes%ROWTYPE;
  BEGIN
  
    SELECT *
    INTO return_rec
    FROM notes
    WHERE id = the_id;
  
    RETURN return_rec;
  
  END;

  FUNCTION f_get_note_rec
    ( the_id IN notes.id%TYPE )
  RETURN note_rec
  IS
    return_rec note_rec;
  BEGIN

    SELECT *
    INTO return_rec.note
    FROM notes
    WHERE id = the_id;
    
    return_rec.notebook := pkg_notebooks.f_get( return_rec.note.notebook_id );
    
    return_rec.tags := pkg_note_tags.f_get_tags( the_id );
    
    return_rec.comments := pkg_note_comments.f_get_comments( the_id );
    
    RETURN return_rec;  
  
  END;
  
  FUNCTION f_get_notes_for_tags
    ( the_notebook_id IN notebooks.id%TYPE
    , the_tags IN vc_arr )
  RETURN notes_tab
  IS
    return_tab notes_tab;
  BEGIN

    FOR i IN cur_notes_for_tags
      ( the_notebook_id => the_notebook_id
      , the_tags => the_tags ) 
    LOOP
      return_tab( return_tab.COUNT + 1 ) := f_get_note_rec( i.id );
    END LOOP;
  
    RETURN return_tab;
  
  END;

  FUNCTION f_get_notes
    ( the_notebook_id notes.notebook_id%TYPE
    , the_start_index INTEGER DEFAULT 1
    , the_end_index INTEGER DEFAULT 25 )
  RETURN notes_tab
  IS
    full_tab simple_notes_tab;
    return_tab notes_tab;
    final_end_index INTEGER := 0;
  BEGIN

    OPEN cur_notes( the_notebook_id => the_notebook_id );
    FETCH cur_notes BULK COLLECT INTO full_tab;
    CLOSE cur_notes;
    
    IF full_tab.COUNT < the_end_index THEN
      final_end_index := full_tab.COUNT;
    ELSE
      final_end_index := the_end_index;
    END IF;

    FOR i IN the_start_index..final_end_index LOOP
      return_tab( return_tab.COUNT + 1 ) := f_get_note_rec( full_tab( i ).id );
    END LOOP;
    
    RETURN return_tab; 
      
  END;  

  FUNCTION f_get_days_notes
    ( the_notebook_id IN notebooks.id%TYPE
    , the_date IN DATE )
  RETURN notes_tab
  IS
    temp_tab simple_notes_tab;
    return_tab notes_tab;
  BEGIN
  
    OPEN cur_days_notes
          ( the_notebook_id => the_notebook_id
          , the_date => the_date );
    FETCH cur_days_notes BULK COLLECT INTO temp_tab;
    CLOSE cur_days_notes;
    
    IF temp_tab.COUNT > 0 THEN
      FOR i IN temp_tab.FIRST..temp_tab.LAST LOOP
        return_tab( i ) := f_get_note_rec( temp_tab( i ).id );
      END LOOP;
    END IF;

    RETURN return_tab;        
  
  END;

  FUNCTION find
    ( the_notebook_id IN notebooks.id%TYPE
    , the_search_text IN VARCHAR2 )
  RETURN notes_tab
  IS
    temp_tab simple_notes_tab;
    return_tab notes_tab;
  BEGIN
    
    OPEN cur_find
      ( the_notebook_id => the_notebook_id
      , the_search_text => LOWER( the_search_text ) );
    FETCH cur_find BULK COLLECT INTO temp_tab;
    CLOSE cur_find;    
  
    IF temp_tab.COUNT > 0 THEN
      FOR i IN temp_tab.FIRST..temp_tab.LAST LOOP
        return_tab( i ) := f_get_note_rec( temp_tab( i ).id );      
      END LOOP;    
    END IF;
    
    RETURN return_tab;
  
  END;

  PROCEDURE p_save
    ( the_note IN OUT notes%ROWTYPE )
  IS
  BEGIN
  
    IF the_note.id IS NULL THEN
    
      SELECT notes_seq.NEXTVAL
      INTO the_note.id
      FROM DUAL;
    
      the_note.created_at := SYSDATE;
      the_note.created_by := USER;
      the_note.updated_at := SYSDATE;
      the_note.updated_by := USER;
    
      INSERT INTO notes
        ( id
        , notebook_id
        , title
        , note
        , created_at
        , created_by
        , updated_at
        , updated_by )
      VALUES
        ( the_note.id
        , the_note.notebook_id
        , the_note.title
        , the_note.note
        , the_note.created_at
        , the_note.created_by
        , the_note.updated_at
        , the_note.updated_by );

    ELSE
    
      the_note.updated_at := SYSDATE;
      the_note.updated_by := USER;
    
      UPDATE notes
      SET title = the_note.title
        , note = the_note.note
        , notebook_id = the_note.notebook_id
        , updated_at = the_note.updated_at
        , updated_by = the_note.updated_by
      WHERE id = the_note.id;     
    
    END IF;
  
  END;
  
  PROCEDURE p_save
    ( the_note_rec IN OUT note_rec )
  IS
    test_note notes%ROWTYPE;
  BEGIN
    
    --SAVE THE NOTE   
    logger.p_debug( 'pkg_notes.p_save', 'save note' );
    p_save( the_note => the_note_rec.note );
    --SAVE THE TAGS 
    logger.p_debug( 'pkg_notes.p_save', 'save tags' );    
    pkg_note_tags.p_save_note_tags( the_note_rec.note.id, the_note_rec.tags );
    --SAVE THE COMMENTS 
    logger.p_debug( 'pkg_notes.p_save', 'save comments' );    
    pkg_note_comments.p_save( the_note_rec.comments );
  
    logger.p_debug( 'pkg_notes.p_save', 'done' );
  
  END;  
  
  PROCEDURE p_validate
    ( the_note IN notes%ROWTYPE
    , the_messages OUT pkg_array_utils.vc_arr )
  IS
  BEGIN
  
    IF the_note.note IS NULL THEN
      the_messages( the_messages.COUNT + 1 ) := 'The note can not be left blank.';    
    END IF;
  
  END;
  
  PROCEDURE p_compose_note
    ( notebook_id IN VARCHAR2
    , note_title IN VARCHAR2
    , note_note IN VARCHAR2
    , note_tags IN VARCHAR2 DEFAULT NULL
    , note_comments IN pkg_note_comments.note_comments_tab DEFAULT pkg_note_comments.empty_tab    
    , the_note OUT note_rec
    , messages OUT pkg_array_utils.vc_arr )
  IS
  BEGIN
    
    the_note.notebook := pkg_notebooks.f_get( the_id => notebook_id );
  
    the_note.note.notebook_id := TRIM( notebook_id );
    the_note.note.title := TRIM( note_title );
    the_note.note.note := TRIM( note_note );

    BEGIN
      the_note.tags := pkg_array_utils.f_undelimit_me( note_tags, ',' );
      the_note.tags := pkg_array_utils.f_trim_elements( the_note.tags );
    EXCEPTION
      WHEN OTHERS THEN
        logger.p_error( 'note_create', 'Processing tags: '||SQLERRM );
        messages( messages.COUNT + 1 ) := 'There has been a problem processing the tags. Try using a comma to separate the tags.';
    END;                

    the_note.comments := note_comments;

    p_validate( the_note => the_note.note, the_messages => messages ); 

  END;
  
  PROCEDURE p_destroy
    ( the_id IN notes.id%TYPE )
  IS
  BEGIN
  
    DELETE FROM notes WHERE id = the_id;
  
  END;  

END;
/
