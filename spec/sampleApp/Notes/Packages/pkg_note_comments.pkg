/*<TOAD_FILE_CHUNK>*/
CREATE OR REPLACE PACKAGE pkg_note_comments
IS

  TYPE note_comments_tab
  IS TABLE OF note_comments%ROWTYPE
  INDEX BY BINARY_INTEGER; 
  
  empty_tab note_comments_tab;

  FUNCTION f_get
    ( the_id note_comments.id%TYPE )
  RETURN note_comments%ROWTYPE;

  FUNCTION f_get_comments
    ( the_note_id IN note_comments.note_id%TYPE )
  RETURN note_comments_tab;

  PROCEDURE p_create
    ( the_note_id IN note_comments.note_id%TYPE
    , the_text IN note_comments.text%TYPE );

  PROCEDURE p_update
    ( the_id IN note_comments.id%TYPE
    , the_note_id IN note_comments.note_id%TYPE
    , the_text IN note_comments.text%TYPE );
  
  PROCEDURE p_save
    ( the_comment IN note_comments%ROWTYPE );    
      
  PROCEDURE p_save
    ( the_comments IN note_comments_tab );    
    
  PROCEDURE p_delete
    ( the_id IN note_comments.id%TYPE );    
    
END;

/
/*<TOAD_FILE_CHUNK>*/

CREATE OR REPLACE PACKAGE BODY pkg_note_comments
IS

  FUNCTION f_get
    ( the_id note_comments.id%TYPE )
  RETURN note_comments%ROWTYPE
  IS
    return_rec note_comments%ROWTYPE;
  BEGIN
    
    SELECT *
    INTO return_rec
    FROM note_comments
    WHERE id = the_id;
    
    RETURN return_rec;
    
  END;

  FUNCTION f_get_comments
    ( the_note_id IN note_comments.note_id%TYPE )
  RETURN note_comments_tab
  IS
    return_tab note_comments_tab;
  BEGIN

    SELECT *
    BULK COLLECT INTO return_tab
    FROM note_comments
    WHERE note_id = the_note_id
    ORDER BY created_at;

    RETURN return_tab;
      
  END;

  PROCEDURE p_create
    ( the_note_id IN note_comments.note_id%TYPE
    , the_text IN note_comments.text%TYPE )
  IS
  BEGIN
  
    INSERT INTO note_comments
      ( id
      , note_id
      , text
      , created_at
      , created_by
      , updated_at
      , updated_by )
    VALUES
      ( note_comments_seq.nextval
      , the_note_id
      , the_text
      , SYSDATE
      , USER
      , SYSDATE
      , USER );
  
  END;
  
  PROCEDURE p_update
    ( the_id IN note_comments.id%TYPE
    , the_note_id IN note_comments.note_id%TYPE
    , the_text IN note_comments.text%TYPE )
  IS
  BEGIN
  
    UPDATE note_comments
    SET note_id = the_note_id
      , text = the_text
      , updated_at = SYSDATE
      , updated_by = USER
    WHERE id = the_id;
          
  END;
  
  PROCEDURE p_save
    ( the_comment IN note_comments%ROWTYPE )
  IS
  BEGIN
  
    IF the_comment.id IS NULL
    OR the_comment.id < 0 
    THEN
      p_create
        ( the_note_id => the_comment.note_id
        , the_text => the_comment.text );
    ELSE
      p_update
        ( the_id => the_comment.id
        , the_note_id => the_comment.note_id
        , the_text => the_comment.text );    
    
    END IF;    
  
  END;  
  
  PROCEDURE p_save
    ( the_comments IN note_comments_tab )
  IS
  BEGIN
  
    IF the_comments.COUNT > 0 THEN
      FOR i IN the_comments.FIRST..the_comments.LAST LOOP
        p_save( the_comments( i ) );       
      END LOOP;
    END IF;
  
  END;
  
  PROCEDURE p_delete
    ( the_id IN note_comments.id%TYPE )
  IS
  BEGIN
  
    DELETE FROM note_comments WHERE id = the_id;
  
  END;    

END;

/
